<!DOCTYPE html>
<html>
<head>
  <title>Planner</title>
  <%= stylesheet_link_tag 'application', media: 'all' %>
  <%= javascript_include_tag 'application', 'data-turbo-track': 'reload' %>
</head>
<body>
  <nav class="navbar navbar-expand-lg bg-body-tertiary">
    <div class="container-fluid">
      <h3 class="mt-4" id="current-date"><%= @current_date_formatted %></h3>
      <% if user_signed_in? %>
        <div class="dropdown">
          <button class="btn btn-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown">
            <%= current_user.email %>
          </button>
          <ul class="dropdown-menu">
            <li>
              <%= button_to "Выйти", destroy_user_session_path, method: :delete, class: "dropdown-item" %>
            </li>
          </ul>
        </div>
      <% else %>
        <%= button_to "Войти", new_user_session_path, class: "btn btn-primary" %>
      <% end %>
    </div>
  </nav>

  <button onclick="openCalendar()">Открыть календарь</button>
  <input type="date" id="calendar" style="display:none" onchange="navigateToDate(this.value)">

  <div class="week-navigation">
    <button onclick="navigateWeek(-1)">←</button>
    <div class="week d-flex">
      <% @week_dates.each_with_index do |date, index| %>
        <a href="?date=<%= date %>" class="btn btn-outline-success mx-1 <%= 'active' if date == Date.parse(params[:date] || Date.current.to_s) %>">
          <%= @days_of_week[index] %>, <%= date.strftime('%d %B') %>
        </a>
      <% end %>
    </div>
    <button onclick="navigateWeek(1)">→</button>
  </div>

  <div class="container-fluid">
    <h4 class="my-3">Расписание</h4>
    <ul id="task-list" class="list-group">
      <% @tasks.each do |task| %>
        <li class="list-group-item">
          <%= "#{task.start_time.strftime('%H:%M')} - #{task.end_time.strftime('%H:%M')}" %>
          <button class="btn btn-link" onclick="openEditModal('<%= task.id %>')"><%= task.title %></button>
        </li>
      <% end %>
    </ul>
    <button class="btn btn-primary mt-3" onclick="openCreateModal()">Добавить задачу</button>
    <button class="btn btn-info" onclick="optimizeSchedule()">Улучшить расписание</button>
    <button class="btn btn-warning" onclick="shiftSchedule()">Сдвинуть расписание</button>
  </div>

  <!-- Модальное окно для создания/редактирования задачи -->
  <div id="taskModal" class="modal">
    <div class="modal-content">
      <span class="close" onclick="closeModal()">&times;</span>
      <h3 id="modal-title">Добавить задачу</h3>
      <form id="taskForm">
        <input type="hidden" id="task-id" name="task[id]">
        <label for="title">Заголовок:</label>
        <input type="text" id="title" name="task[title]" required><br>

        <label for="description">Описание:</label>
        <textarea id="description" name="task[description]"></textarea><br>

        <input type="hidden" id="task-date" name="task[date]" value="<%= @current_date.to_s %>">

        <label for="start_time">Начало:</label>
        <input type="time" id="start_time" name="task[start_time]"><br>

        <label for="end_time">Окончание:</label>
        <input type="time" id="end_time" name="task[end_time]"><br>

        <label for="hashtag">Хэштег:</label>
        <input type="text" id="hashtag" name="task[hashtag]" placeholder="#бабушка"><br>

        <button type="button" onclick="submitTask()">Сохранить</button>
        <button id="delete-task-button" type="button">Удалить</button>
      </form>
    </div>
  </div>

  <script>
    function openCreateModal() {
      document.querySelector(".modal-overlay").style.display = "block";
      document.getElementById("taskModal").style.display = "block";
      document.getElementById("modal-title").innerText = "Добавить задачу";
      document.getElementById("taskForm").reset();
    }

    function openEditModal(id) {
      fetch(`/tasks/${id}/edit`)
        .then(response => response.json())
        .then(data => {
          document.querySelector(".modal-overlay").style.display = "block";
          document.getElementById("taskModal").style.display = "block";
          document.getElementById("modal-title").innerText = "Редактировать задачу";
          document.getElementById("task-id").value = data.id;
          document.getElementById("title").value = data.title;
          document.getElementById("description").value = data.description;
          document.getElementById("start_time").value = data.start_time.substring(11, 16);
          document.getElementById("end_time").value = data.end_time.substring(11, 16);
          document.getElementById("delete-task-button").onclick = () => deleteTask(data.id);
        });
    }

    function closeModal() {
      document.querySelector(".modal-overlay").style.display = "none";
      document.getElementById("taskModal").style.display = "none";
    }

    function submitTask() {
      const formData = new FormData(document.getElementById("taskForm"));
      const id = document.getElementById("task-id").value; // ID задачи
      const method = id ? "PATCH" : "POST"; // Если ID есть, редактируем, иначе создаём
      const url = id ? `/tasks/${id}` : "/tasks";

      fetch(url, {
        method: method,
        headers: {
          'X-CSRF-Token': '<%= form_authenticity_token %>',
          'Accept': 'application/json'
        },
        body: formData
      })
      .then(response => {
        if (!response.ok) {
          return response.json().then(data => {
            throw new Error(data.errors || 'Неизвестная ошибка');
          });
        }
        return response.json();
      })
      .then(data => {
        showNotification("Задача сохранена!", "success");
        closeModal();
        location.reload();
      })
      .catch(error => {
        showNotification("Ошибка: " + error.message, "danger");
      });
    }

    function navigateWeek(offset) {
      const params = new URLSearchParams(window.location.search);
      const currentDate = new Date(params.get('date') || Date.now());
      currentDate.setDate(currentDate.getDate() + offset * 7);
      window.location.href = `?date=${currentDate.toISOString().split('T')[0]}`;
    }

    function openCalendar() {
      document.getElementById('calendar').style.display = 'block';
    }

    function navigateToDate(date) {
      if (date) {
        window.location.href = `?date=${date}`;
      }
    }

    function deleteTask(id) {
      const modal = new bootstrap.Modal(document.getElementById("confirmationModal"));
      const confirmButton = document.getElementById("confirmActionButton");

      document.getElementById("confirmationMessage").innerText = "Вы уверены, что хотите удалить задачу?";

      confirmButton.onclick = () => {
        fetch(`/tasks/${id}`, {
          method: "DELETE",
          headers: {
            "X-CSRF-Token": "<%= form_authenticity_token %>"
          }
        })
        .then(response => {
          if (response.ok) {
            showNotification("Задача удалена", "success");
            location.reload();
          } else {
            showNotification("Не удалось удалить задачу", "error");
          }
        });

        modal.hide(); // Скрываем модальное окно после подтверждения
      };

      modal.show(); // Показываем модальное окно
    }

    function showNotification(message, type) {
      const alertDiv = document.createElement("div");
      alertDiv.className = `alert alert-${type} alert-dismissible fade show`;
      alertDiv.role = "alert";
      alertDiv.innerText = message;

      const closeButton = document.createElement("button");
      closeButton.type = "button";
      closeButton.className = "btn-close";
      closeButton.setAttribute("data-bs-dismiss", "alert");
      closeButton.ariaLabel = "Close";

      alertDiv.appendChild(closeButton);
      document.body.appendChild(alertDiv);

      setTimeout(() => {
        alertDiv.remove();
      }, 15000); // Уведомление исчезнет через 15 секунд
    }

    let suggestionIndex = 0;
    let suggestions = [];

    function displayOptimizationModal(receivedSuggestions) {
      suggestions = receivedSuggestions;
      suggestionIndex = 0;

      showNextSuggestion();
    }

    function showNextSuggestion() {
      if (suggestionIndex >= suggestions.length) {
        showNotification("Все предложения обработаны!", "success");
        location.reload();
        return;
      }

      const suggestion = suggestions[suggestionIndex];
      const modalContent = `
        <p>Можно перенести задачу "<strong>${suggestion.task_title}</strong>" (${suggestion.current_time}) на:</p>
        <button class="btn btn-primary" onclick="applyOption(${suggestion.task_id}, '${suggestion.option_1}')">Вариант 1: ${suggestion.option_1}</button>
        <button class="btn btn-primary" onclick="applyOption(${suggestion.task_id}, '${suggestion.option_2}')">Вариант 2: ${suggestion.option_2}</button>
        <button class="btn btn-secondary" onclick="skipSuggestion()">Оставить как есть</button>
      `;

      document.getElementById('optimizationSuggestions').innerHTML = modalContent;
      new bootstrap.Modal(document.getElementById('optimizationResultModal')).show();
    }

    function applyOption(taskId, timeRange) {
      const [start_time, end_time] = timeRange.split(' - ');
      fetch('/home/apply_optimization', {
        method: "POST",
        headers: {
          "X-CSRF-Token": "<%= form_authenticity_token %>",
          "Content-Type": "application/json"
        },
        body: JSON.stringify({ task_id: taskId, start_time, end_time })
      })
        .then(response => response.json())
        .then(data => {
          showNotification(data.message, "success");
          suggestionIndex++;
          showNextSuggestion();
        });
    }

    function skipSuggestion() {
      suggestionIndex++;
      showNextSuggestion();
    }

    function optimizeSchedule() {
      fetch('/home/optimize_schedule', {
        method: "POST",
        headers: {
          "X-CSRF-Token": "<%= form_authenticity_token %>"
        }
      })
        .then(response => response.json())
        .then(data => {
          if (data.suggestions.length === 0) {
            showNotification("Нет предложений для улучшения.", "info");
          } else {
            displayOptimizationModal(data.suggestions);
          }
        });
    }

    function mergeTask(index) {
      const suggestion = suggestions[index];
      fetch(`/home/merge_tasks`, {
        method: "POST",
        headers: {
          "X-CSRF-Token": "<%= form_authenticity_token %>",
          "Content-Type": "application/json"
        },
        body: JSON.stringify({ task1_id: suggestion.task1_id, task2_id: suggestion.task2_id })
      }).then(() => location.reload());
    }

    function transferTask(index) {
      const suggestion = suggestions[index];
      fetch(`/home/transfer_task`, {
        method: "POST",
        headers: {
          "X-CSRF-Token": "<%= form_authenticity_token %>",
          "Content-Type": "application/json"
        },
        body: JSON.stringify({ task_id: suggestion.task_id, destination_time: suggestion.destination_time })
      }).then(() => location.reload());
    }


    function shiftSchedule() {
      fetch('/home/shift_schedule', {
        method: "POST",
        headers: {
          "X-CSRF-Token": "<%= form_authenticity_token %>",
          "Content-Type": "application/json"
        }
      })
        .then(response => {
          if (!response.ok) {
            throw new Error("Ошибка при обновлении расписания");
          }
          return response.json();
        })
        .then(data => {
          if (data.message) {
            showNotification(data.message, "success");
            location.reload(); // Перезагрузка страницы для отображения изменений
          }
        })
        .catch(error => {
          showNotification("Не удалось обновить расписание: " + error.message, "danger");
        });
    }


  </script>

  <div class="modal fade" id="resultModal" tabindex="-1" aria-labelledby="resultModalLabel" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="resultModalLabel">Результаты</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body" id="resultMessage">
          <!-- Результаты будут вставляться сюда -->
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Закрыть</button>
        </div>
      </div>
    </div>
  </div>

<div class="modal fade" id="optimizationResultModal" tabindex="-1" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Улучшение расписания</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body" id="optimizationSuggestions">
        <!-- Контент предложений появится здесь -->
      </div>
    </div>
  </div>
</div>

</body>
</html>
